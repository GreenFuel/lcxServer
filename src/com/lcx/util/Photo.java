package com.lcx.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadBase;
import org.apache.commons.fileupload.ProgressListener;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

import sun.misc.BASE64Encoder;

import com.google.gson.JsonObject;

public class Photo {
	
	public JsonObject PhotoDownload(HttpServletRequest request,String savePath,String tempPath)
	{
        File tmpFile = new File(tempPath);
        if (!tmpFile.exists()) {
            //创建临时目录
            tmpFile.mkdir();
        }
        
        String value = null;
        JsonObject json = new JsonObject();
        new ArrayList<String>();
        
        //消息提示
        int msg ;
        try{
            //使用Apache文件上传组件处理文件上传步骤：
            //1、创建一个DiskFileItemFactory工厂
            DiskFileItemFactory factory = new DiskFileItemFactory();
            //设置工厂的缓冲区的大小，当上传的文件大小超过缓冲区的大小时，就会生成一个临时文件存放到指定的临时目录当中。
            factory.setSizeThreshold(1024*100);//设置缓冲区的大小为1M，如果不指定，那么缓冲区的大小默认是10KB
            //设置上传时生成的临时文件的保存目录
            factory.setRepository(tmpFile);
            //2、创建一个文件上传解析器
            ServletFileUpload upload = new ServletFileUpload(factory);
            //监听文件上传进度
            upload.setProgressListener(new ProgressListener(){
                public void update(long pBytesRead, long pContentLength, int arg2) {
                    System.out.println("文件大小为：" + pContentLength + ",当前已处理：" + pBytesRead);
                    /**
                     * 文件大小为：14608,当前已处理：4096
			                                文件大小为：14608,当前已处理：7367
			                                文件大小为：14608,当前已处理：11419
			                                文件大小为：14608,当前已处理：14608
                     */
                }
            });
             //解决上传文件名的中文乱码
            upload.setHeaderEncoding("UTF-8"); 
            //3、判断提交上来的数据是否是上传表单的数据
            if(!ServletFileUpload.isMultipartContent(request)){
                //按照传统方式获取数据
            	msg = 4;
//            	msg = "传输的数据不合规范";
            	json.addProperty("msg", msg);
                return json;
            }
            
            //设置上传单个文件的大小的最大值，目前是设置为1024*1024字节，也就是1MB
//            upload.setFileSizeMax(1024*1024*1);
            //设置上传文件总量的最大值，最大值=同时上传的多个文件的大小的最大值的和，目前设置为10MB
            upload.setSizeMax(1024*1024*10);
            //4、使用ServletFileUpload解析器解析上传数据，解析结果返回的是一个List<FileItem>集合，每一个FileItem对应一个Form表单的输入项
            List<FileItem> list = upload.parseRequest(request);
            for(FileItem item : list){
            	//如果fileitem中封装的是普通输入项的数据
                if(item.isFormField()){
                    String name = item.getFieldName();
                    //解决普通输入项的数据的中文乱码问题
                    value = item.getString("UTF-8");
                    
//                    value = new String(value.getBytes("iso8859-1"),"UTF-8");
                    json.addProperty(name, value);
                    System.out.println(name + "=" + value);
                }
                else{//如果fileitem中封装的是上传文件
                    //得到上传的文件名称
                    String filename = item.getName();
                    System.out.println(filename);
                    if(filename==null || filename.trim().equals("")){
                        continue;
                    }
                    //注意：不同的浏览器提交的文件名是不一样的，有些浏览器提交上来的文件名是带有路径的，如：  c:\a\b\1.txt，而有些只是单纯的文件名，如：1.txt
                    //处理获取到的上传文件的文件名的路径部分，只保留文件名部分
                    filename = filename.substring(filename.lastIndexOf("\\")+1);
                    //得到上传文件的扩展名
                    String fileExtName = filename.substring(filename.lastIndexOf(".")+1);
                    //如果需要限制上传的文件类型，那么可以通过文件的扩展名来判断上传的文件类型是否合法
                    System.out.println("上传的文件的扩展名是："+fileExtName);
                    //获取item中的上传文件的输入流
                    InputStream in = item.getInputStream();
                    
                    //将UUID（唯一识别码）拼接到文件名中，得到文件保存的名称
                    String saveFilename = UUID.randomUUID().toString() + "_" + value + "." + fileExtName;
                    //得到文件名的hashCode的值，即得到filename这个字符串对象在内存中的地址，并对hashcode进行运算，后拼接得到文件的保存目录，防止一个目录下面出现太多文件，要使用hash算法打散存储
                    String realSavePath = makePath(saveFilename, savePath);
                    
                    //创建一个文件输出流
                    FileOutputStream out = new FileOutputStream(realSavePath + "\\" + saveFilename);
                    
                    //存储图片是什么图片和它的存储路径
//                    json.addProperty(value, realSavePath + "\\" + saveFilename);
                    json.addProperty(value, realSavePath + "\\" + saveFilename);
                    
                    //创建一个缓冲区
                    byte buffer[] = new byte[1024];
                    //判断输入流中的数据是否已经读完的标识
                    int len = 0;
                    //循环将输入流读入到缓冲区当中，(len=in.read(buffer))>0就表示in里面还有数据
                    while((len=in.read(buffer))>0){
                        //使用FileOutputStream输出流将缓冲区的数据写入到指定的目录(savePath + "\\" + filename)当中
                        out.write(buffer, 0, len);
                    }
                    //关闭输入流
                    in.close();
                    //关闭输出流
                    out.close();
                    //删除处理文件上传时生成的临时文件
                    item.delete();
                }
            }
            msg = 1;
//            msg = "文件上传成功！";
            json.addProperty("msg", msg);
        }catch (FileUploadBase.FileSizeLimitExceededException e) {
            e.printStackTrace();
            msg = 2;
//            msg = "单个文件超出最大值！！！";
            json.addProperty("msg", msg);
            return json;
        }catch (FileUploadBase.SizeLimitExceededException e) {
            e.printStackTrace();
            msg = 3;
//            msg = "上传文件的总的大小超出限制的最大值！！！";
            json.addProperty("msg", msg);
            return json;
        }catch (Exception e) {
        	msg = 4;
//            msg= "文件上传失败！";
            json.addProperty("msg", msg);
            e.printStackTrace();
        }
		return json;
    }
    
    /**
     * 为防止一个目录下面出现太多文件，要使用hash算法打散存储
    * @Method: makePath
    * @Description: 
    * @param filename 文件名，要根据文件名生成存储目录
    * @param savePath 文件存储路径
    * @return 新的存储目录
    */ 
    private String makePath(String filename,String savePath){
        //得到文件名的hashCode的值，得到的就是filename这个字符串对象在内存中的地址
        int hashcode = filename.hashCode();
        int dir1 = hashcode&0xf;  //0--15
        int dir2 = (hashcode&0xf0)>>4;  //0-15
        //构造新的保存目录
        String dir = savePath + "\\" + dir1 + "\\" + dir2;  //upload\2\3  upload\3\5
        //File既可以代表文件也可以代表目录
        File file = new File(dir);
        //如果目录不存在
        if(!file.exists()){
            //创建目录
            file.mkdirs();
        }
        return dir;
    }

    
    
    //图片转化成base64字符串
    public static String GetImageStr(String filePath) {// 将图片文件转化为字节数组字符串，并对其进行Base64编码处理
    	if( filePath == null)
    		return "0";
    	InputStream in = null;
	    byte[] data = null;
	    // 读取图片字节数组
	    try {
		    in = new FileInputStream(filePath);
		    data = new byte[in.available()];
		    in.read(data);
		    in.close();
	    } catch (IOException e) {
	    	e.printStackTrace();
	    }
	    // 对字节数组Base64编码
	    BASE64Encoder encoder = new BASE64Encoder();
	    return encoder.encode(data);// 返回Base64编码过的字节数组字符串
    }
   
    /*
    // base64字符串转化成图片
    public static boolean GenerateImage(String imgStr) { // 对字节数组字符串进行Base64解码并生成图片
	    if (imgStr == null) // 图像数据为空
	    	return false;
	    BASE64Decoder decoder = new BASE64Decoder();
	    try {
		    // Base64解码
		    byte[] b = decoder.decodeBuffer(imgStr);
		    for (int i = 0; i < b.length; ++i) 
		    {
			    if (b[i] < 0) {// 调整异常数据
			    	b[i] += 256;
		    }
		    // 生成jpeg图片
		    String imgFilePath = "C:/Users/Star/Desktop/test22.png";// 新生成的图片
		    OutputStream out = new FileOutputStream(imgFilePath);
		    out.write(b);
		    out.flush();
		    out.close();
	    	return true;
	    	
	    } catch (Exception e) {
	    	e.printStackTrace();
	    	return false;
	    }
    }
	    */
    
    
    
    
    
    
    //服务端将文件传到客户端
	public void PhotoUpload(OutputStream out,String fileName, String fileSaveRootPath) throws IOException{
	
		//通过文件名找出文件的所在目录
        String path = findFileSavePathByFileName(fileName,fileSaveRootPath);
        //得到要下载的文件
        File file = new File(path + "\\" + fileName);
        //如果文件不存在
        if(!file.exists()){
        	return;
        }
        fileName.substring(fileName.indexOf("_")+1);
        //设置响应头，控制浏览器下载该文件
//        response.setHeader("content-disposition", "attachment;filename=" + URLEncoder.encode(realname, "UTF-8"));
        //读取要下载的文件，保存到文件输入流
        FileInputStream in = new FileInputStream(path + "\\" + fileName);
        //创建缓冲区
        byte buffer[] = new byte[1024];
        int len = 0;
        //循环将输入流中的内容读取到缓冲区当中
        while((len=in.read(buffer))>0){
            //输出缓冲区的内容到浏览器，实现文件下载
            out.write(buffer, 0, len);
            out.flush();
        }
        //关闭文件输入流
        in.close();
    }
    
    /**
    * @Method: findFileSavePathByFileName
    * @Description: 通过文件名和存储上传文件根目录找出要下载的文件的所在路径
    * @param filename 要下载的文件名
    * @param saveRootPath 上传文件保存的根目录，也就是/WEB-INF/upload目录
    * @return 要下载的文件的存储目录
    */ 
    public String findFileSavePathByFileName(String filename,String saveRootPath){
        int hashcode = filename.hashCode();
        int dir1 = hashcode&0xf;  //0--15
        int dir2 = (hashcode&0xf0)>>4;  //0-15
        String dir = saveRootPath + "\\" + dir1 + "\\" + dir2;  //upload\2\3  upload\3\5
        File file = new File(dir);
        if(!file.exists()){
            //创建目录
            file.mkdirs();
        }
        return dir;
    }
}
